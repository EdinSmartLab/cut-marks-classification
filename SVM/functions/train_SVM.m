function [Classifier, validationAccuracy] = train_SVM( trainData, method)
%
%   method.name: 
%           'linear' or 'poly' or 'gauss':
%                   train SVM with kernel defined by method.name and
%                   parameters method.order, method.Scale, method.BocCon
%           'gauss-auto':
%                   train SVM by optimizing the scale and the
%                   BoxConstraints of the gaussian kernel using Bayesian
%                   optimization
%           'auto':
%                   train SVM using Bayesian optimization optimizing over
%                   all hyperparameters of fitcsvm


switch method.name

    case { 'linear' , 'poly' , 'gauss' }
        SVM = fitcsvm(...
            trainData.X, ...
            trainData.Y, ...
            'KernelFunction'  , method.name,   ...
            'PolynomialOrder' , method.PolOrd,  ...
            'KernelScale'     , method.Scale,  ...
            'BoxConstraint'   , method.BoxCon, ...
            'Standardize'     , true, ...
            'ClassNames'      , trainData.categories,...
            'Verbose'         ,method.Verbose);
    
    case 'gauss-auto'
            opts = struct(  'Optimizer','bayesopt',...
                            'Kfold',40,...
                            'AcquisitionFunctionName','expected-improvement-per-second-plus',...
                            'MaxObjectiveEvaluations',100,...
                            'Verbose',method.Verbose,...
                            'ShowPlots',method.ShowPlots);
            
            SVM = fitcsvm( trainData.X,trainData.Y,...
                            'KernelFunction','rbf',...
                            'OptimizeHyperparameters','auto',...
                            'HyperparameterOptimizationOptions',opts);
                        
    case 'auto'
            opts = struct(  'Optimizer','bayesopt',...
                            'Kfold',40,...
                            'AcquisitionFunctionName','expected-improvement-per-second-plus',...
                            'MaxObjectiveEvaluations',100,...
                            'Verbose',method.Verbose,...
                            'ShowPlots',method.ShowPlots);
                        
            SVM = fitcsvm(  trainData.X,trainData.Y,...
                            'OptimizeHyperparameters','all',...
                            'HyperparameterOptimizationOptions',opts);
    otherwise
        error('trainer string not recognised')
        
end


Classifier.SVM = SVM;
Classifier.predictFcn = @(x) predict( SVM, x);

svmPost = fitSVMPosterior(SVM);
Classifier.svmPost = svmPost;
Classifier.predictPostFcn = @(x) predict( svmPost, x);

% Perform cross-validation and compute validation accuracy
partitionedModel = crossval( svmPost, 'KFold', 20 );
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
